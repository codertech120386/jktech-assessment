version: 2.1 # 2.1 config required to use orbs

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1 # use the AWS ECR orb
  aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
  aws-cli: circleci/aws-cli@3.1.4 # use the AWS CLI orb
  #jira: circleci/jira@1.3.1
  slack: circleci/slack@4.12.1

executors:
  slack-executor:
    docker:
      - image: cimg/base:stable
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &ssh-keys
    add_ssh_keys:
      fingerprints:
        - "ad:04:9b:1c:93:2f:f2:d3:52:37:8e:64:a2:af:db:bf" #sonar

jobs:
  Code-Quality-Analysis:
    machine: true
    resource_class: omneky-org/sonarqube
    steps:
      - checkout
      - *show-current-branch-name
      - *ssh-keys
      - run:
          command: |
            zip fastapi.zip -qr * .[^.]*
            # ssh-keyscan $SSH_HOST_SONAR >> ~/.ssh/known_hosts
            # scp fastapi.zip $SSH_USER_SONAR@$SSH_HOST_SONAR:/home/ubuntu/Repo/fastapi-backend
            # ssh $SSH_USER_SONAR@$SSH_HOST_SONAR "sh fastapi-sonar.sh"

  #################################################################################

  verify-dev-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                 --task-definition ${MY_APP_PREFIX_DEV} \
                 --output text \
                 --query 'taskDefinition.taskDefinitionArn')
             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: "${MY_APP_PREFIX_DEV}"
          cluster: "${MY_APP_PREFIX_DEV}"
          task-definition-arn: "${TASK_DEFINITION_ARN}"
      - slack/notify:
          event: fail
          mentions: "@channel"
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  #################################################################################

  verify-qa-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                 --task-definition ${MY_APP_PREFIX_QA} \
                 --output text \
                 --query 'taskDefinition.taskDefinitionArn')
             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: "${MY_APP_PREFIX_QA}"
          cluster: "${MY_APP_PREFIX_QA}"
          task-definition-arn: "${TASK_DEFINITION_ARN}"
      - slack/notify:
          event: fail
          mentions: "@channel"
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  #################################################################################

  verify-staging-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                 --task-definition ${MY_APP_PREFIX_STAGING} \
                 --output text \
                 --query 'taskDefinition.taskDefinitionArn')
             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: "${MY_APP_PREFIX_STAGING}"
          cluster: "${MY_APP_PREFIX_STAGING}"
          task-definition-arn: "${TASK_DEFINITION_ARN}"
      - slack/notify:
          event: fail
          mentions: "@channel"
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  #################################################################################

  verify-production-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                 --task-definition ${MY_APP_PREFIX_PROD} \
                 --output text \
                 --query 'taskDefinition.taskDefinitionArn')
             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: "${MY_APP_PREFIX_PROD}"
          cluster: "${MY_APP_PREFIX_PROD}"
          task-definition-arn: "${TASK_DEFINITION_ARN}"
      # - slack/notify:
      #     event: fail
      #     mentions: "@channel"
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

workflows:
  Development-deployment:
    jobs:
      - aws-ecr/build-and-push-image: # orb built-in job
          executor:
            name: aws-ecr/default
            image: ubuntu-2004:2022.10.1
            resource-class: large
            use-docker-layer-caching: true
          repo: "${MY_APP_PREFIX_DEV}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-cli-version: latest
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_REGION}
          registry-id: AWS_ECR_REGISTRY_ID
          create-repo: true
          dockerfile: "Dockerfile"
          tag: "latest"
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - development

      - aws-ecs/deploy-service-update: # orb built-in job
          requires:
            - aws-ecr/build-and-push-image
          family: "${MY_APP_PREFIX_DEV}"
          cluster: "${MY_APP_PREFIX_DEV}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          container-image-name-updates: "container=${MY_APP_PREFIX_DEV},tag=latest"
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - development
      - verify-dev-deployment:
          requires:
            - aws-ecs/deploy-service-update
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - development

  #################################################################################

  QA-deployment:
    jobs:
      - Code-Quality-Analysis:
          context:
            - aws-ecs
            - notify
          filters:
            branches:
              ignore:
                - development
                - staging
                - main

      - Approve_Feature_Deployment:
          type: approval
          requires:
            - Code-Quality-Analysis

      - aws-ecr/build-and-push-image: # orb built-in job
          executor:
            name: aws-ecr/default
            image: ubuntu-2004:2022.10.1
            resource-class: large
            use-docker-layer-caching: true
          repo: "${MY_APP_PREFIX_QA}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-cli-version: latest
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_REGION}
          registry-id: AWS_ECR_REGISTRY_ID
          create-repo: true
          dockerfile: "Dockerfile"
          tag: "latest"
          requires:
            - Approve_Feature_Deployment
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              ignore:
                - development
                - staging
                - main

      - aws-ecs/deploy-service-update: # orb built-in job
          requires:
            - aws-ecr/build-and-push-image
          family: "${MY_APP_PREFIX_QA}"
          cluster: "${MY_APP_PREFIX_QA}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          container-image-name-updates: "container=${MY_APP_PREFIX_QA},tag=latest"
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              ignore:
                - development
                - staging
                - main
      - verify-qa-deployment:
          requires:
            - aws-ecs/deploy-service-update
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              ignore:
                - development
                - staging
                - main

  #################################################################################

  Staging-deployment:
    jobs:
      - aws-ecr/build-and-push-image: # orb built-in job
          executor:
            name: aws-ecr/default
            image: ubuntu-2004:2022.10.1
            resource-class: large
            use-docker-layer-caching: true
          repo: "${MY_APP_PREFIX_STAGING}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-cli-version: latest
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_REGION}
          registry-id: AWS_ECR_REGISTRY_ID
          create-repo: true
          dockerfile: "Dockerfile"
          tag: "latest"
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - staging

      - aws-ecs/deploy-service-update: # orb built-in job
          requires:
            - aws-ecr/build-and-push-image
          family: "${MY_APP_PREFIX_STAGING}"
          cluster: "${MY_APP_PREFIX_STAGING}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          container-image-name-updates: "container=${MY_APP_PREFIX_STAGING},tag=latest"
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - staging
      - verify-staging-deployment:
          requires:
            - aws-ecs/deploy-service-update
          context:
            - aws-ecs
            - notify
            - ai-inpaint
          filters:
            branches:
              only:
                - staging

  #################################################################################

  Production-deployment:
    jobs:
      - aws-ecr/build-and-push-image: # orb built-in job
          executor:
            name: aws-ecr/default
            image: ubuntu-2004:2022.10.1
            resource-class: large
            use-docker-layer-caching: true
          repo: "${MY_APP_PREFIX_PROD}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-cli-version: latest
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: ${AWS_REGION}
          registry-id: AWS_ECR_REGISTRY_ID
          create-repo: true
          dockerfile: "Dockerfile"
          tag: "latest"
          context:
            - aws-ecs
            - aws-circleci
            - db
          filters:
            branches:
              only:
                - circleci-project-setup

      - aws-ecs/deploy-service-update: # orb built-in job
          requires:
            - aws-ecr/build-and-push-image
          family: "${MY_APP_PREFIX_PROD}"
          cluster: "${MY_APP_PREFIX_PROD}"
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          container-image-name-updates: "container=${MY_APP_PREFIX_PROD},tag=latest"
          context:
            - aws-ecs
            - aws-circleci
            - db
          filters:
            branches:
              only:
                - circleci-project-setup
      - verify-production-deployment:
          requires:
            - aws-ecs/deploy-service-update
          context:
            - aws-ecs
            - aws-circleci
          filters:
            branches:
              only:
                - circleci-project-setup